{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nconst notFound = 404;\nconst numberNegative = -1;\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    const registerWork = registration;\n\n    registerWork.onupdatefound = () => {\n      const installingWorker = registerWork.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registerWork);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registerWork);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === notFound || contentType != null && contentType.indexOf('javascript') === numberNegative) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"sources":["/home/breno/front-end-bigbangbeer/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","notFound","numberNegative","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","registerWork","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  || window.location.hostname === '[::1]'\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\nconst notFound = 404;\nconst numberNegative = -1;\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      const registerWork = registration;\n      registerWork.onupdatefound = () => {\n        const installingWorker = registerWork.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registerWork);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registerWork);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === notFound\n\n        || (contentType != null && contentType.indexOf('javascript') === numberNegative)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}